#!/bin/bash -e
# only run on 64-bit linux
if ! go env | grep GOHOSTOS | grep -q linux; then
  echo 'This script must be run on 64-bit linux'
  exit 1
fi
if ! go env | grep GOHOSTARCH | grep -q amd64; then
  echo 'This script must be run on 64-bit linux'
  exit 1
fi

if [ "${VERSION}" = "" ]; then
  echo 'You must specify the VERSION environment variable. This is the version you are releasing.'
  exit 1
fi
if [ "${TEST}" = "false" ] && [ "${AWS_ACCESS_KEY_ID}" = "" ]; then
  echo 'Missing required AWS_ACCESS_KEY_ID environment variable.'
  exit 1
fi
if [ "${TEST}" = "false" ] && [ "${AWS_SECRET_ACCESS_KEY}" = "" ]; then
  echo 'Missing required AWS_SECRET_ACCESS_KEY environment variable.'
  exit 1
fi
if [ "${BUCKET}" = "" ]; then
  echo 'Missing required BUCKET environment variable.'
  exit 1
fi

if ! grep -q 'VERSION = "'${VERSION}'"' config/constants.go ; then
  echo ''${VERSION}' not found in config/constants. Please update the version in config/constants.go before proceeding'
  exit 1
fi

echo 'Building version '${VERSION}' binaries'
go vet $(go list ./... | grep -v /vendor/)
go install github.com/daticahealth/cli
GOOS=windows GOARCH=amd64 GOBIN="" go install github.com/daticahealth/cli
GOOS=linux GOARCH=amd64 GOBIN="" go install github.com/daticahealth/cli
GOOS=darwin GOARCH=amd64 GOBIN="" go install github.com/daticahealth/cli

echo 'Syncing S3 data to the public/ directory'
rm -rf public/*
aws s3 sync s3://${BUCKET}/datica public/
mkdir public/${VERSION}

echo 'Building version '${VERSION}' JSON configuration files'
echo '{
"Version": "'${VERSION}'",
"Sha256": "'$(openssl dgst -sha256 -binary ${GOBIN}/windows_amd64/cli.exe | openssl base64)'"
}' > public/windows-amd64.json
echo '{
"Version": "'${VERSION}'",
"Sha256": "'$(openssl dgst -sha256 -binary ${GOBIN}/cli | openssl base64)'"
}' > public/linux-amd64.json
echo '{
"Version": "'${VERSION}'",
"Sha256": "'$(openssl dgst -sha256 -binary ${GOBIN}/darwin_amd64/cli | openssl base64)'"
}' > public/darwin-amd64.json

echo 'Copying version '${VERSION}' binaries'
cp ${GOBIN}/windows_amd64/cli.exe public/${VERSION}/windows-amd64
cp ${GOBIN}/cli public/${VERSION}/linux-amd64
cp ${GOBIN}/darwin_amd64/cli public/${VERSION}/darwin-amd64

gzip public/${VERSION}/windows-amd64
gzip public/${VERSION}/linux-amd64
gzip public/${VERSION}/darwin-amd64

rm -rf builds
mkdir -p builds/datica_${VERSION}_windows_amd64/
mkdir -p builds/datica_${VERSION}_linux_amd64/
mkdir -p builds/datica_${VERSION}_darwin_amd64/

cp ${GOBIN}/windows_amd64/cli.exe builds/datica_${VERSION}_windows_amd64/datica.exe
cp ${GOBIN}/cli builds/datica_${VERSION}_linux_amd64/datica
cp ${GOBIN}/darwin_amd64/cli builds/datica_${VERSION}_darwin_amd64/datica

# generate zip files for windows and darwin
cd builds/
zip -r -X datica_${VERSION}_windows_amd64.zip datica_${VERSION}_windows_amd64
zip -r -X datica_${VERSION}_darwin_amd64.zip datica_${VERSION}_darwin_amd64

# generate tarballs for darwin and linux
tar cvzf datica_${VERSION}_linux_amd64.tar.gz datica_${VERSION}_linux_amd64
tar cvzf datica_${VERSION}_darwin_amd64.tar.gz datica_${VERSION}_darwin_amd64

# generate debs for linux
mkdir -p datica_${VERSION}_linux_amd64/usr/bin
mv datica_${VERSION}_linux_amd64/datica datica_${VERSION}_linux_amd64/usr/bin/
cp -r ../DEBIAN datica_${VERSION}_linux_amd64/
sed -i "s/{{version}}/${VERSION}/g" datica_${VERSION}_linux_amd64/DEBIAN/control
sed -i "s/{{arch}}/amd64/g" datica_${VERSION}_linux_amd64/DEBIAN/control
LINUX_AMD64_SIZE="$(stat --printf='%s' datica_${VERSION}_linux_amd64/usr/bin/datica)"
(( LINUX_AMD64_SIZE = LINUX_AMD64_SIZE /1024 ))
sed -i "s/{{size}}/${LINUX_AMD64_SIZE}/g" datica_${VERSION}_linux_amd64/DEBIAN/control
dpkg-deb -b datica_${VERSION}_linux_amd64

cd ..

if [ "${TEST}" = "false" ]; then
  echo 'Publishing to S3'
  aws s3 sync public/ s3://${BUCKET}/datica --delete --exclude "*.DS_Store"

  echo 'Copying Github assets to S3'
  aws s3 cp builds s3://${BUCKET}/assets --recursive --exclude "*.DS_Store"
else
  echo 'Test mode enabled, skipping S3 upload and Github release'
  ls -al
  ls -al public
  cat public/*.json
  ls -al public/${VERSION}
  ls -al builds
fi
